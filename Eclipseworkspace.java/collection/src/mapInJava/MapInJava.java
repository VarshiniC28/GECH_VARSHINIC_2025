package mapInJava;

import java.util.HashMap;
import java.util.Map;

public class MapInJava {
	public static void main(String[] args) {

		/*
		 * ðŸ”¹ MAP INTERFACE:
		 * =====================
		 * âœ… A `Map` represents a collection of key-value pairs.
		 * âœ… Keys must be UNIQUE (Duplicates are NOT allowed).
		 * âœ… Values can be DUPLICATE.
		 * âœ… Each key maps to exactly one value.
		 * âœ… It does NOT follow any insertion order (unless using LinkedHashMap).
		 * âœ… Implements the `Map` interface (not `Collection`).
		 *
		 * ðŸ”¹ COMMONLY USED MAP IMPLEMENTATIONS:
		 * =====================================
		 * ðŸ”¸ `HashMap<K, V>`      - Unordered, allows one `null` key, multiple `null` values.
		 * ðŸ”¸ `LinkedHashMap<K, V>` - Preserves insertion order.
		 * ðŸ”¸ `TreeMap<K, V>`      - Sorted based on keys (uses Red-Black Tree, `O(log n)`).
		 * ðŸ”¸ `Hashtable<K, V>`    - Thread-safe version of `HashMap` (but slower).
		 */

		// âœ… Creating a HashMap (Key: Integer, Value: String)
		Map<Integer, String> map = new HashMap<>();

		// âœ… Adding key-value pairs using put()
		map.put(1, "ONE");
		map.put(1, "TEN"); // âœ… Same key, value "ONE" is replaced by "TEN"
		map.put(3, "TWO");
		map.put(4, "THREE");

		// âœ… Printing the Map (No guarantee of insertion order)
		System.out.println("Initial Map: " + map); // Output: {1=TEN, 3=TWO, 4=THREE}

		// âœ… Removing a key-value pair
		map.remove(3); // Removes key 3
		System.out.println("After Removing Key 3: " + map); // Output: {1=TEN, 4=THREE}

		// âœ… Checking if a key exists
		System.out.println("Contains Key 3? " + map.containsKey(3)); // false

		// âœ… Checking if a value exists
		System.out.println("Contains Value 'THREE'? " + map.containsValue("THREE")); // true

		/*
		 * ðŸ”¹ Important Map Methods:
		 * ============================
		 * âœ… put(K key, V value)  - Inserts or updates a key-value pair.
		 * âœ… get(K key)           - Returns the value for a given key.
		 * âœ… remove(K key)        - Removes the mapping for a key.
		 * âœ… containsKey(K key)   - Checks if the map contains a key.
		 * âœ… containsValue(V val) - Checks if the map contains a value.
		 * âœ… keySet()             - Returns all keys as a Set.
		 * âœ… values()             - Returns all values as a Collection.
		 * âœ… entrySet()           - Returns all key-value pairs as a Set of Map.Entry.
		 */

		// âœ… Getting a value by key
		System.out.println("Value for Key 1: " + map.get(1)); // TEN

		// âœ… Iterating through keys
		System.out.println("\nðŸ”¹ Iterating through keys:");
		for (Integer key : map.keySet()) {
			System.out.println("Key: " + key + ", Value: " + map.get(key));
		}

		// âœ… Iterating through key-value pairs
		System.out.println("\nðŸ”¹ Iterating through key-value pairs:");
		for (Map.Entry<Integer, String> entry : map.entrySet()) {
			System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
		}

		// âœ… Getting all values
		System.out.println("\nAll Values: " + map.values());
	}
}
